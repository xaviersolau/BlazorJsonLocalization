---------------------
Sample1.SimpleLocalizer.g.cs
---------------------
// ----------------------------------------------------------------------
// <copyright file="SimpleLocalizer.cs" company="Xavier Solau">
// Copyright © 2021 Xavier Solau.
// Licensed under the MIT license.
// See LICENSE file in the project root for full license information.
// </copyright>
// ----------------------------------------------------------------------

using Microsoft.Extensions.Localization;
using SoloX.BlazorJsonLocalization.Tools.Core.Samples.Sample1;
using System.Collections.Generic;

namespace SoloX.BlazorJsonLocalization.Tools.Core.Samples.Sample1
{
    /// <summary>
    /// ISimpleLocalizer generated implementation.
    /// </summary>
    public class SimpleLocalizer : ISimpleLocalizer
    {
        private readonly IStringLocalizer<Component> stringLocalizer;

        /// <summary>
        /// Setup instance.
        /// </summary>
        /// <param name="stringLocalizer">Base string localizer.</param>
        public SimpleLocalizer(IStringLocalizer<Component> stringLocalizer)
        {
            this.stringLocalizer = stringLocalizer;
        }

        /// <inheritdoc/>
        public LocalizedString this[string name]
            => this.stringLocalizer[name];

        /// <inheritdoc/>
        public LocalizedString this[string name, params object[] arguments]
            => this.stringLocalizer[name, arguments];

        /// <inheritdoc/>
        public IEnumerable<LocalizedString> GetAllStrings(bool includeParentCultures)
            => this.stringLocalizer.GetAllStrings(includeParentCultures);

        /// <summary>
        /// Get BasicProperty localized string.
        /// </summary>
        public string BasicProperty
        {
            get => this.stringLocalizer[nameof(BasicProperty)];
        }

        /// <summary>
        /// Get BasicMethod localized string.
        /// </summary>
        public string BasicMethod()
            => this.stringLocalizer[nameof(BasicMethod)];

        /// <summary>
        /// Get BasicMethodArg localized string.
        /// </summary>
        public string BasicMethodArg(string arg)
            => this.stringLocalizer[nameof(BasicMethodArg), arg];

        /// <summary>
        /// Get BasicMethodArg1Arg2 localized string.
        /// </summary>
        public string BasicMethodArg1Arg2(string arg1, string arg2)
            => this.stringLocalizer[nameof(BasicMethodArg1Arg2), arg1, arg2];
    }


}

---------------------
Sample1.SimpleLocalizerExtensions.g.cs
---------------------
// ----------------------------------------------------------------------
// <copyright file="SimpleLocalizerExtensions.cs" company="Xavier Solau">
// Copyright © 2021 Xavier Solau.
// Licensed under the MIT license.
// See LICENSE file in the project root for full license information.
// </copyright>
// ----------------------------------------------------------------------

using Microsoft.Extensions.Localization;
using SoloX.BlazorJsonLocalization.Tools.Core.Samples.Sample1;
using System;

namespace SoloX.BlazorJsonLocalization.Tools.Core.Samples.Sample1
{
    /// <summary>
    /// SimpleLocalizerExtensions generated extension methods.
    /// </summary>
    public static class SimpleLocalizerExtensions
    {
        /// <summary>
        /// Convert StringLocalizer to ISimpleLocalizer
        /// </summary>
        /// <param name="stringLocalizer">Base string localizer.</param>
        /// <returns>The localizer instance.</returns>
        public static ISimpleLocalizer ToSimpleLocalizer(this IStringLocalizer<Component> stringLocalizer)
            => new SimpleLocalizer(stringLocalizer);

        /// <summary>
        /// Get BasicProperty localized value from the String Localizer.
        /// </summary>
        /// <param name="stringLocalizer">String localizer to get the value from.</param>
        /// <returns>The localized value.</returns>
        public static string BasicProperty(this IStringLocalizer<Component> stringLocalizer)
        {
            if (stringLocalizer == null)
            {
                throw new ArgumentNullException(nameof(stringLocalizer));
            }

            return stringLocalizer[nameof(BasicProperty)];
        }

        /// <summary>
        /// Get BasicMethod localized value from the String Localizer.
        /// </summary>
        /// <param name="stringLocalizer">String localizer to get the value from.</param>
        /// <returns>The localized value.</returns>
        public static string BasicMethod(this IStringLocalizer<Component> stringLocalizer)
        {
            if (stringLocalizer == null)
            {
                throw new ArgumentNullException(nameof(stringLocalizer));
            }

            return stringLocalizer[nameof(BasicMethod)];
        }

        /// <summary>
        /// Get BasicMethodArg localized value from the String Localizer.
        /// </summary>
        /// <param name="stringLocalizer">String localizer to get the value from.</param>
        /// <returns>The localized value.</returns>
        public static string BasicMethodArg(this IStringLocalizer<Component> stringLocalizer, string arg)
        {
            if (stringLocalizer == null)
            {
                throw new ArgumentNullException(nameof(stringLocalizer));
            }

            return stringLocalizer[nameof(BasicMethodArg), arg];
        }

        /// <summary>
        /// Get BasicMethodArg1Arg2 localized value from the String Localizer.
        /// </summary>
        /// <param name="stringLocalizer">String localizer to get the value from.</param>
        /// <returns>The localized value.</returns>
        public static string BasicMethodArg1Arg2(this IStringLocalizer<Component> stringLocalizer, string arg1, string arg2)
        {
            if (stringLocalizer == null)
            {
                throw new ArgumentNullException(nameof(stringLocalizer));
            }

            return stringLocalizer[nameof(BasicMethodArg1Arg2), arg1, arg2];
        }
    }
}

---------------------
Component.json
---------------------
{
  "BasicProperty": "BasicProperty",
  "BasicMethod": "BasicMethod - ",
  "BasicMethodArg": "BasicMethodArg - {0} = arg",
  "BasicMethodArg1Arg2": "BasicMethodArg1Arg2 - {0} = arg1 - {1} = arg2"
}
---------------------
Component-en.json
---------------------
{
  "BasicProperty": "BasicProperty",
  "BasicMethod": "BasicMethod - ",
  "BasicMethodArg": "BasicMethodArg - {0} = arg",
  "BasicMethodArg1Arg2": "BasicMethodArg1Arg2 - {0} = arg1 - {1} = arg2"
}
---------------------
Component-fr.json
---------------------
{
  "BasicProperty": "BasicProperty",
  "BasicMethod": "BasicMethod - ",
  "BasicMethodArg": "BasicMethodArg - {0} = arg",
  "BasicMethodArg1Arg2": "BasicMethodArg1Arg2 - {0} = arg1 - {1} = arg2"
}
